I"!}<h2 id="문제">문제</h2>

<p>총 8개의 톱니를 가지고 있는 톱니바퀴 4개가 아래 그림과 같이 일렬로 놓여져 있다. 또, 톱니는 N극 또는 S극 중 하나를 나타내고 있다. 톱니바퀴에는 번호가 매겨져 있는데, 가장 왼쪽 톱니바퀴가 1번, 그 오른쪽은 2번, 그 오른쪽은 3번, 가장 오른쪽 톱니바퀴는 4번이다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/1.png" alt="img" /></p>

<p>이때, 톱니바퀴를 총 K번 회전시키려고 한다. 톱니바퀴의 회전은 한 칸을 기준으로 한다. 회전은 시계 방향과 반시계 방향이 있고, 아래 그림과 같이 회전한다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/2.png" alt="img" /></p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/3.png" alt="img" /></p>

<p>톱니바퀴를 회전시키려면, 회전시킬 톱니바퀴와 회전시킬 방향을 결정해야 한다. 톱니바퀴가 회전할 때, 서로 맞닿은 극에 따라서 옆에 있는 톱니바퀴를 회전시킬 수도 있고, 회전시키지 않을 수도 있다. 톱니바퀴 A를 회전할 때, 그 옆에 있는 톱니바퀴 B와 서로 맞닿은 톱니의 극이 다르다면, B는 A가 회전한 방향과 반대방향으로 회전하게 된다. 예를 들어, 아래와 같은 경우를 살펴보자.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/4.png" alt="img" /></p>

<p>두 톱니바퀴의 맞닿은 부분은 초록색 점선으로 묶여있는 부분이다. 여기서, 3번 톱니바퀴를 반시계 방향으로 회전했다면, 4번 톱니바퀴는 시계 방향으로 회전하게 된다. 2번 톱니바퀴는 맞닿은 부분이 S극으로 서로 같기 때문에, 회전하지 않게 되고, 1번 톱니바퀴는 2번이 회전하지 않았기 때문에, 회전하지 않게 된다. 따라서, 아래 그림과 같은 모양을 만들게 된다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/5.png" alt="img" /></p>

<p>위와 같은 상태에서 1번 톱니바퀴를 시계 방향으로 회전시키면, 2번 톱니바퀴가 반시계 방향으로 회전하게 되고, 2번이 회전하기 때문에, 3번도 동시에 시계 방향으로 회전하게 된다. 4번은 3번이 회전하지만, 맞닿은 극이 같기 때문에 회전하지 않는다. 따라서, 아래와 같은 상태가 된다.</p>

<p><img src="https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14891/6.png" alt="img" /></p>

<p>톱니바퀴의 초기 상태와 톱니바퀴를 회전시킨 방법이 주어졌을 때, 최종 톱니바퀴의 상태를 구하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 1번 톱니바퀴의 상태, 둘째 줄에 2번 톱니바퀴의 상태, 셋째 줄에 3번 톱니바퀴의 상태, 넷째 줄에 4번 톱니바퀴의 상태가 주어진다. 상태는 8개의 정수로 이루어져 있고, 12시방향부터 시계방향 순서대로 주어진다. N극은 0, S극은 1로 나타나있다.</p>

<p>다섯째 줄에는 회전 횟수 K(1 ≤ K ≤ 100)가 주어진다. 다음 K개 줄에는 회전시킨 방법이 순서대로 주어진다. 각 방법은 두 개의 정수로 이루어져 있고, 첫 번째 정수는 회전시킨 톱니바퀴의 번호, 두 번째 정수는 방향이다. 방향이 1인 경우는 시계 방향이고, -1인 경우는 반시계 방향이다.</p>

<h3 id="출력">출력</h3>

<p>총 K번 회전시킨 이후에 네 톱니바퀴의 점수의 합을 출력한다. 점수란 다음과 같이 계산한다.</p>

<ul>
  <li>1번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 1점</li>
  <li>2번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 2점</li>
  <li>3번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 4점</li>
  <li>4번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 8점</li>
</ul>

<h3 id="예제-입력-1">예제 입력 1</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10101111
01111101
11001110
00000010
2
3 -1
1 1
</code></pre></div></div>

<h3 id="예제-출력-1">예제 출력 1</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7
</code></pre></div></div>

<h3 id="예제-입력-2">예제 입력 2</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>11111111
11111111
11111111
11111111
3
1 1
2 1
3 1
</code></pre></div></div>

<h3 id="예제-출력-2">예제 출력 2</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>15
</code></pre></div></div>

<h3 id="예제-입력-3">예제 입력 3</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10001011
10000011
01011011
00111101
5
1 1
2 1
3 1
4 1
1 -1
</code></pre></div></div>

<h3 id="예제-출력-3">예제 출력 3</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>6
</code></pre></div></div>

<h3 id="예제-입력-4">예제 입력 4</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10010011
01010011
11100011
01010101
8
1 1
2 1
3 1
4 1
1 -1
2 -1
3 -1
4 -1
</code></pre></div></div>

<h3 id="예제-출력-4">예제 출력 4</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
</code></pre></div></div>

<h2 id="나의-코드">나의 코드</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">size</span> <span class="o">=</span> <span class="mi">8</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">gearCount</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
    <span class="kd">static</span> <span class="kt">int</span><span class="o">[][]</span> <span class="n">map</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">bufferedReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">gearCount</span><span class="o">][</span><span class="n">size</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">gearCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="n">bufferedReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">size</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="n">j</span><span class="o">]);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="no">K</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">bufferedReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">K</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">input</span> <span class="o">=</span> <span class="n">bufferedReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">curGear</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">0</span><span class="o">])</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span>
            <span class="kt">int</span> <span class="n">dir</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">input</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="kt">int</span> <span class="n">curDir</span> <span class="o">=</span> <span class="n">dir</span><span class="o">;</span>

            <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Rotation</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
            <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">curGear</span><span class="o">,</span> <span class="n">dir</span><span class="o">));</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">curGear</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">gearCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//front</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">rotationCheck</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">curDir</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">curDir</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">curDir</span><span class="o">;</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">curDir</span><span class="o">));</span>
                <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="n">curDir</span> <span class="o">=</span> <span class="n">dir</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">curGear</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">rotationCheck</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">curDir</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">curDir</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">curDir</span><span class="o">;</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">curDir</span><span class="o">));</span>
                <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">Rotation</span> <span class="n">curRotation</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
                <span class="n">shiftGear</span><span class="o">(</span><span class="n">curRotation</span><span class="o">.</span><span class="na">gear</span><span class="o">,</span> <span class="n">curRotation</span><span class="o">.</span><span class="na">dir</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">rotationCheck</span><span class="o">(</span><span class="kt">int</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dir</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">front</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">front</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">!=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span> <span class="o">+</span> <span class="mi">1</span><span class="o">][</span><span class="mi">6</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">cur</span> <span class="o">-</span> <span class="mi">1</span><span class="o">][</span><span class="mi">2</span><span class="o">]</span> <span class="o">!=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="mi">6</span><span class="o">])</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">shiftGear</span><span class="o">(</span><span class="kt">int</span> <span class="n">cur</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span><span class="c1">//dir:1-시계, 0-반시계</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">dir</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span><span class="c1">//시계</span>
            <span class="kt">int</span> <span class="n">last</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>
            <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">last</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">first</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="mi">0</span><span class="o">];</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
            <span class="o">}</span>
            <span class="n">map</span><span class="o">[</span><span class="n">cur</span><span class="o">][</span><span class="n">size</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">result</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">gearCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">answer</span> <span class="o">+=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rotation</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">gear</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">dir</span><span class="o">;</span>
    <span class="nc">Rotation</span><span class="o">(</span><span class="kt">int</span> <span class="n">gear</span><span class="o">,</span> <span class="kt">int</span> <span class="n">dir</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">gear</span> <span class="o">=</span> <span class="n">gear</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dir</span> <span class="o">=</span> <span class="n">dir</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p>나는 이 문제를 보자마자 한 톱니가 돌아갈 때 같이 돌아 갈 톱니들을 한번에 돌려야 겠다고 생각을 하였다.</p>
  </li>
  <li>
    <p>그래서 돌아가는 톱니 앞 뒤로 돌아갈 수 있는 톱니들을 큐에넣었다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="n">curGear</span><span class="o">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">gearCount</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">k</span><span class="o">++)</span> <span class="o">{</span><span class="c1">//front</span>
  <span class="k">if</span> <span class="o">(!</span><span class="n">rotationCheck</span><span class="o">(</span><span class="n">k</span><span class="o">,</span> <span class="n">curDir</span><span class="o">,</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">curDir</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">curDir</span><span class="o">;</span>
    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">curDir</span><span class="o">));</span>
  <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
  
<span class="n">curDir</span> <span class="o">=</span> <span class="n">dir</span><span class="o">;</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">curGear</span><span class="o">;</span> <span class="n">j</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">--)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(!</span><span class="n">rotationCheck</span><span class="o">(</span><span class="n">j</span><span class="o">,</span> <span class="n">curDir</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span> <span class="o">{</span>
    <span class="n">curDir</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">curDir</span><span class="o">;</span>
    <span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">j</span> <span class="o">-</span> <span class="mi">1</span><span class="o">,</span> <span class="n">curDir</span><span class="o">));</span>
  <span class="o">}</span><span class="k">else</span> <span class="k">break</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>

    <ul>
      <li>
        <p><strong>public static boolean rotationCheck(int cur, int dir, boolean front)</strong></p>

        <p>이 함수는 cur의 다음 것이 회전을 하는 가를 판별을 하여 retrun해 준다.</p>

        <p>false 일 경우 다음 것을 회전시켜야 하는데, 그 방향은 현재와 다른 방향이기때문에</p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">curDir</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">-</span> <span class="n">curDir</span><span class="o">;</span><span class="c1">//현재방향의 반대. 1 -&gt; -1, -1 -&gt; 1</span>
<span class="n">queue</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Rotation</span><span class="o">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">curDir</span><span class="o">));</span>
</code></pre></div>        </div>

        <p>이렇게 큐에 넣어 주었다.</p>
      </li>
    </ul>
  </li>
  <li>
    <p>그 다음 큐에 있는 것을 하나씩 빼서 한번에 회전을 시켜준다.</p>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
    <span class="nc">Rotation</span> <span class="n">curRotation</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
    <span class="n">shiftGear</span><span class="o">(</span><span class="n">curRotation</span><span class="o">.</span><span class="na">gear</span><span class="o">,</span> <span class="n">curRotation</span><span class="o">.</span><span class="na">dir</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>
    <p><strong>public static void shiftGear(int cur, int dir)</strong></p>

    <p>이 함수는 회전시켜주는 함수이다. dir가 1이면 시계방향으로 –&gt; 이 방향으로 한칸씩 이동한다.</p>

    <p>‼️ 이 부분을 ArrayList를 사용했다면 앞에서 한개 remove하고 뒤에서 add했으면 쉬웠을 거 같기도 하다!!</p>
  </li>
  <li>
    <p>회전이 완료되면 출력조건에 맞게 결과 값을 출력해준다.</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//출력조건
1번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 1점
2번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 2점
3번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 4점
4번 톱니바퀴의 12시방향이 N극이면 0점, S극이면 8점
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">result</span><span class="o">()</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">gearCount</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">map</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">answer</span> <span class="o">+=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
 <span class="k">return</span> <span class="n">answer</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="느낀점">느낀점</h2>

<p>경사로보다는 쉬웠던거 같다! 뭔가 인덱스 적으로 많이 난해하지 않아서 그냥 생각하는 대로 구현을 했다. 다만 코드가 또 엄청 길어서 다음에는 조금 더 짧게 하는 방법을 고민해봐야겠다. 지금은 큐로 한번에 했지만 검사하는 동시에 회전시킬수는 없나 ? 아무튼 고민해 봐야겠다 ! 그리고 이제 시뮬은 40분정도 시간을 꼭 재면서 풀어야 겠다. 오늘도 풀다가 무한도전 봤다 흑흑</p>

<ul>
  <li>문제: https://www.acmicpc.net/problem/14891</li>
  <li>저장소: https://github.com/yoo-chaewon/HELLO_JAVA/blob/master/Algorithm/3.SWEA/Q_14891_톱니바퀴.java</li>
</ul>
:ET